Колачићи
--------

HTTP протокол је дизајниран тако да се заснива на захтевима клијента и
одговорима сервера. Сам протокол не предвиђа никакво одржавање стања
између различитих захтева и одговора (сваки пар захтев-одговор се
сматра независним од осталих). С обзиром на то да се у
савременим веб-апликацијама јавља потреба за одржавањем стања током
комуникације клијента и сервера, појавили су се различити механизми да
се то оствари. Један такав механизам чине **колачићи** (енгл. cookies)
где се стање чува на клијенту, а други чине **сесије**
(енгл. sessions) где се стање чува на серверу.

Подаци који се чувају у колачићима и сесијама треба схватити као
одређени облик привремених података који се чувају док не истекну
после неког времена или док их корисник експлицитно не обрише или
поништи. Са друге стране трајне податке треба чувати на серверу
(обично у бази података). У наставку наводимо примере података који се
обично чувају у колачићима и сесијама:

- Корисничко име тренутно улогованог корисника
- Производи које је корисник убацио у корпу током посете електронској
  продавници
- Разна подешавања и прилагођавања сајта кориснику (на пример, валута
  у којој ће се приказивати цене, језик на ком ће се приказивати
  садржај сајта, податак о томе да ли се користи тамна или светла тема
  и слично)

Ови подаци су такви да у случају да нестану неће се десити ништа
катастрофално (корисник увек може да се улогује поново, попуни
производе у корпу, прилагоди сајт свом укусу и слично).
  
Са друге стране, у бази података се памте информације за које желимо
да обезбедимо да су заиста трајни (на пример, објаве на блогу које је
корисник унео, корисничка имена и лозинке регистрованих корисника,
податке о свим производима који се користе у електронској продавници и
слично).

Колачићи функционишу тако што сервер у склопу неког одговора уз сам
одговор пошаље и тзв. колачић тј. додатну малу количину података које
затим клијент прима и трајно памти (колачићу се може задати и време
истека, али оно може бити и бесконачно, што значи да ће колачић бити
складиштен на клијенту све док се експлицитно не обрише). У сваком
наредном захтеву клијента ка том серверу клијент уз захтев шаље и тај
колачић, тако да сервер добија податке који су сачувани на клијенту.

Прикажимо на једном једноставном примеру како се колачићи користе
заједно са библиотеком Flask. Када приступи апликацији корисник уноси
своје име у формулар који му се приказује. У сваком наредном приступу
истој апликацији кориснику се не приказује више тај формулар, него
поздравна порука испод које му се нуди могућност да се "излогује",
након чега му се поново нуди формулар за унос имена.

Кренимо од шаблона ``templates/index.html``. У зависности од тога да
ли му је прослеђена променљива ``name``, у њему се приказује или
формулар за логовање или поздравна порука и линк за излогивање.

.. literalinclude:: /../_src/13_kolacici/templates/index.html
    :language: html+jinja

Желимо да се резултати попуњеног формулара проследе функцији
``setcookie`` (коју ћемо дефинисати у ``app.py`` и повезати са путањом
``/setcookie``), па атрибут ``action`` формулара постављамо на URL
који добијамо функцијом ``url_for``. Слично, желимо да URL за
излогивање води ка путањи ``/resetcookie`` повезаној са функцијом
``resetcookie``, коју ћемо дефинисати у ``app.py``, па га поново
градимо позивом функције ``url_for``.

Прикажимо сада садржај датотеке ``app.py``. У функцији ``index``
проверавамо да ли је постављен колачић ``name``. Ако јесте, позивамо
функцију ``render_template`` прослеђујући јој вредност из тог
колачића, што значи да ће се тада приказати поздравна порука и линк за
излогивање. Ако није, позивамо функцију ``render_template`` без
прослеђене променљиве ``name``, што значи да ће се приказати формулар
за унос имена. Сви колачићи који су пристигли у склопу захтева се могу
прочитати коришћењем речника ``request.cookies``.

.. literalinclude:: /../_src/13_kolacici/app.py
    :language: python
    :lines: 5-11


Постављање колачића се врши тако што се прво креира објекат одговора
позивом Flask функције ``make_response``.  Њој се као аргумент
прослеђује основни садржај HTTP одговора (то може бити ниска
карактера, резултат позива функције ``render_template`` или резултат
позива функције ``redirect``, којом се врши аутоматска редирекција
корисника ка некој другој путањи). Након изградње одговора, колачић се
у њега додаје позивом методе ``set_cookie``. Њој се прослеђује кључ и
вредност, као и опциони аргумент ``expires``, којим се регулише када
колачић истиче. Након додавања колачића, функција може да врати
формирани одговор.

У нашем примеру постављање колачића се врши у функцији ``setcookie``.

.. literalinclude:: /../_src/13_kolacici/app.py
    :language: python
    :lines: 13-19

Пошто се колачић поставља на основу података из формулара чији се
подаци преносе методом ``post``, морамо тај метод омогућити приликом
регистровања путање. На почетку функције проверавамо да ли је заиста
употребљена метода POST. Ако јесте, име очитавамо из података унетих у
формулар читајући POST параметар ``request.form["name"]``. Након
постављања колачића желимо одмах да се вратимо на главну страну
апликације. Зато позивамо функцију ``redirect``, прослеђујући јој URL
који одговара путањи на којој се позива функција ``index`` (њега лако
одређујемо помоћу функције ``url_for``). Око тако формираног одговора
(који није HTML страна, већ само инструкција да се прегледач
аутоматски пребаци на неку другу адресу тј. URL) се методом
``set_cookie`` поставља и колачић ``name``. На крају се одговор
допуњен колачићем враћа клијенту.

Функција ``resetcookie``, којом се брише колачић, је прилично слична.

.. literalinclude:: /../_src/13_kolacici/app.py
    :language: python
    :lines: 21-25

Поново желимо да се након брисања колачића пребацимо на главну страну
апликације, па се зато уместо помоћу функције ``render_template``
одговор формира помоћу функције ``redirect``.  Не постоји посебна
функција за брисање колачића -- уместо тога се колачић може поново
поставити тако да му је време истека једнако нули.


**Ко жели да зна више?** Колачиће данас обично користе и велике
компаније које приказују огласе и рекламе корисницима на другим
сајтовима (на пример, Google Ads). Када корисник посети сајт који
приказује оглас, компанија која приказује оглас му уз оглас пошаље
колачић у коме је уписан сајт који је тренутно посећен. Након посете
неком другом сајту који приказује огласе, клијент шаље захтев за новим
огласом, међутим, у том захтеву се шаље и колачић који је раније
постављен. На тај начин компанија која приказује огласе има увид у
историју посета сајтовима тог корисника, чак иако се он никада није
логовао и уносио своја корисничка имена и лозинке. Компаније онда
користе те податке да прилагоде огласе и рекламе које ће приказати
кориснику и ускладе их са његовим интересовањима (приметили сте
вероватно, да када посетите неколико сајтова на којима се продаје неки
производ, да вам у наредних неколико дана на свим другим сајтовима и
друштвеним мрежама искачу огласи и рекламе баш за ту врсту производа).
Пошто је ово потенцијални ризик за угрожавање приватности, Европска
унија је донела закон којим се захтева да сви веб-сајтови који користе
колачиће то пријаве корисницима и прибаве сагласност корисника за
употребу тих колачића.
