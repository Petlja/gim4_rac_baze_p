Сесије
------

Колачићи омогућавају чување података на клијенту, унутар прегледача
веба. То значи да ће приликом посете сајту са другог уређаја, па чак и
из другог прегледача веба сви колачићи бити непознати. Са друге
стране, приликом употребе сесија подаци се чувају на серверу. Сесије
су обично ограниченог трајања и можемо их схватити као период у коме
корисник приступа сајту у континуитету током неког краћег временског
периода (нпр. током пола сата или сата). Време истека сесија се може
конфигурисати и у случају да је корисник неактиван (да није слао
захтеве) током периода дужег од периода трајања сесије, сесија се
прекида и сви подаци везани за сесију се бришу.

Механизам сесија се често користи за праћење улогованих корисника.
Корисник приступа сајту, уноси своје корисничко име и лозинку и након
што се на серверу провери да су они исправни, унутар сесије се
региструје да је корисник улогован и памти се његово корисничко име.
Након сваког наредног приступа сајту током трајања те сесије, сервер
зна да је корисник улогован. Када се корисник излогује или када сесија
истекне, кориснику се забрањује приступ деловима сајта резервисаним
само за улоговане кориснике и тражи се да се он поново улогује. У
позадини механизма сесија користе се и колачићи. Наиме, када се креира
сесија и када се први пут у њу нешто упише кориснику се шаље посебан
колачић (тзв. колачић сесије, енгл. session cookie). Он је обично нека
дугачка ниска симбола и јединствена је за сваку сесију сваког
корисника. Наредни пут када корисник приступа сајту он шаље назад тај
колачић и на основу тога сервер препознаје о којој се сесији ради и у
њој проналази податке које је упамтио за тог тренутног корисника и
његову тренутну сесију. Колачићи сесије су подешени тако да се бришу
чим корисник искључи прегледач веба. Формирање и коришћење колачића
сесије је скривено од програмера и он о томе не мора да води рачуна.

Прикажимо апликацију која је веома слична оној коју смо приказали
приликом демонстрације употребе колачића. Корисник уноси своје
корисничко име у формулар и након тога се на серверу памти да је
корисник улогован тако што се унутар сесије памти то корисничко име.
Једноставности ради, у овој апликацији нећемо тражити унос лозинке.
Улогованом кориснику се приказује његово корисничко име и нуди се линк
путем којег може да се излогује.

.. literalinclude:: /../_src/14_sesije/templates/index.html
    :language: html+jinja

Подаци из сесије су унутар Flask апликације доступне у речнику
``session`` (да би се могао користити, потребно је увести га
тј. навести у склопу наредбе ``import``). Функција ``index`` проверава
да ли је корисник улогован анализирајући да ли се у речнику
``session`` налази кључ ``username``. Ако се налази, он се чита и шаље
се функцији ``render_template`` која приказује податак о улогованом
кориснику и нуди линк за излогивање (он води ка путањи која одговара
функцији ``logout``). Ако није, тада се функцији ``render_template``
не прослеђују додатни аргументи, па се на основу шаблона приказује
формулар за логовање.

.. literalinclude:: /../_src/14_sesije/app.py
    :language: python
    :lines: 6-12

Функција ``login`` се позива када се попуни формулар и прима
корисничко име преко методе POST. То корисничко име уписује у сесију и
враћа одговор који налаже прегледачу да се аутоматски пребаци на
главну страну (ону која одговара функцији ``index``).

.. literalinclude:: /../_src/14_sesije/app.py
    :language: python
    :lines: 14-18

Функција ``logout`` се позива када корисник посети линк којим може да
се излогује. Методом ``pop`` брише се кључ ``"username"`` из сесије и
након тога се враћа одговор који налаже прегледачу да се аутоматски
пребаци на главну страну (ону која одговара функцији ``index``).

.. literalinclude:: /../_src/14_sesije/app.py
    :language: python
    :lines: 20-23

Када год се користе сесије неопходно је да се постави вредност
``app.secret_key``. Та вредност треба да буде тајна и користи се за
криптовање (шифровање) података који се чувају у сесији и колачића
који се шаљу на клијент. Добар савет да се генерише тајни кључ је да
се покрене интерактивна Python конзола и да се унесу наредне команде.

.. code-block:: python

   import os
   os.urandom(24)

Излаз може изгледати отприлике овако:

.. code-block:: python

   b'Lz\xbe\xaa\xd3\xce\xcd\xcb>\xdcLq\n%\x11h\x13\x9e\x1f\xf2\x1f\xcc\xddg'

Након тога добијени резултат се може копирати у ``app.py``, одмах
након формирања објекта ``app``.

.. code-block:: python

   app = Flask(__name__)
   app.secret_key = b'Lz\xbe\xaa\xd3\xce\xcd\xcb>\xdcLq\n%\x11h\x13\x9e\x1f\xf2\x1f\xcc\xddg'

   
