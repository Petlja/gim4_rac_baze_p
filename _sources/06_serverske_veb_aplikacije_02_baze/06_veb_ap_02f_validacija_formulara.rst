Валидација података унетих у формулар
-------------------------------------

У претходној верзији апликације корисник је у формулар могао да упише
било какве податке (па чак и да формулар остави празним) и ти подаци
би завршили у бази података. Наравно, ово је веома лоша пракса и
квалитетне веб-апликације проверавају елементарну коректност унетих
података пре него што их упишу у базу (наравно, није могуће проверити
да ли је корисник заиста унео свој број телефона, међутим, могуће је
проверити да се тај број телефона састоји само од цифара и да је број
тих цифара у неком разумном опсегу). Поступак провере података унетих
у формулар назива се **валидација формулара**. Валидацију је могуће
вршити и на клијентском рачунару (пре њиховог слања серверу) и на
серверу (пре њихове даље обраде, што је најчешће њихов упис у базу).
Валидација формулара на клијенту смањује оптерећење сервера, јер се
подаци не шаљу на сервер све док се не утврди да задовољавају
елементарна правила коректности (што се најчешће своди на проверу да
су унети и да су у одговарајућем формату).

Чак и када се изврши валидација података на клијенту, потребно их је
поново валидирати на серверу. Наиме, сервер нема гаранцију да су
подаци који су му стигли прошли проверу на клијенту (на пример,
приликом клика на дугме ``submit`` може се вршити валидација и ако се
установи да подаци нису коректни може се спречити слање података из
формулара, међутим, корисник може GET захтев послати и без коришћења
формулара, тако што се формира одговарајући URL који кодира све GET
параметре. Стога ћемо дорадити претходну веб-апликацију тако да врши
проверу коректности података и на страни клијента и на страни сервера.

Клијентска валидација уз помоћ HTML 5
*************************************

Тренутно важећи стандард језика HTML омогућава да се одређена правила
коректности формулара задају у самом формулару. На тај начин је много
једноставније остварити валидацију него када се користи JavaScript. Са
друге стране, валидација помоћу језика HTML 5 је ипак ограничена и у
језику JavaScript програмер има слободу да формулише произвољне услове
коректности (које год може да испрограмира). Опишимо укратко основне
могућности валидације у језику HTML 5.

- Јако често је потребно осигурати да неко поље формулара није остало
  празно. То се једноставно постиже тиме што се сва поља која су
  обавезна и морају бити попуљена обележе атрибутом ``required``.

- Формат ниски које су допуштене у пољима за унос текста се може
  спецификовати помоћу регуларног израза који се уписује као вредност
  атрибута ``pattern``. Дужина унетог текста може се ограничити
  атрибутима ``minlength`` и ``maxlength``.

  Регуларни изрази су веома сложен формализам за опис формата ниски.
  Нећемо их детаљно покрити у овом уџбенику, али ћемо навести неколико
  основних примера из којих ћете стећи основну представу шта су и како се
  регуларни изрази користе.

  - ``a`` - означава један карактер и то баш ``a``
  - ``[a-z]`` - означава један карактер и то мало слово (од ``a`` до ``z``)
  - ``[a-z0-9_]`` - означава један карактер и то мало слово, цифру или
    подвлаку
  - ``[a-z]+`` - означава реч која се састоји од једног или више малих
    слова (``+`` означава да се нешто јавља једном или више пута)
  - ``[0-9]*`` - означава број који се састоји од нула или више цифара
    (``*`` означава да се нешто јавља нула или више пута)
  - ``abc|def`` - означава једну од две речи ``abc`` или ``def``
  - ``ab?c`` - означава једну од две речи ``abc`` или ``ac`` (``?``
    означава да се нешто, у овом случају ``b``, јавља опционо тј. нула пута или један пут)
  - ``^a`` - означава да ниска мора да почне карактером ``a``
  - ``a$`` - означава да ниска мора да се заврши карактером ``a``
  - ``.`` - означава један, било који карактер
  - ``\.`` означава тачку, ``\[`` означава отворену угласту заграду, итд.

- За унос бројева треба користити ``<input type="number">`` уместо
  ``<input type="text">``. Минимална и максимална допуштена вредност
  се тада могу задати атрибутима ``min`` и ``max``. На пример, за унос
  броја можемо користити ``<input type="number" min="13" max="100">``,
  чиме број година ограничавамо на интервал између 13 и 100.

- За унос мејл адреса треба користити ``<input type="email">``. Ако се
  наведе атрибут ``pattern``, тада се може додатно наметнути формат
  допуштених мејл адреса. На пример у поље ``<input type="email"
  pattern="^[a-z0-9\._-]+@gmail.com$">`` је допуштено уписивати само
  GMail адресе.

- За унос бројева телефона треба користити ``<input type="tel">``.

- За унос лозинки треба користити ``<input type="password">``.
  
Валидација помоћу HTML 5 подразумева и употребу CSS-а којим се поља
формулара стилизују тако да корисник види у којим пољима је дошло до
грешке. За то се користе пседуокласе ``:valid`` и ``:invalid``. На
пример, селектором ``input:valid`` одабиремо све контроле формулара у
којима се тренутно налази исправна вредност, а селектором
``input:invalid`` одабирамо све контроле формулара у којима се
тренутно налази неисправна вредност.  Могућа је и комбинација
псеудокласа, па се, на пример, селектором ``input:invalid:required``
одабиру све контроле формулара које су остале празне, иако су морале
бити попуњене.

Коришћењем HTML 5 могућности за валидацију, формулар можемо дефинисати
на следећи начин.

.. literalinclude:: /../_src/02_baze/06b_insert_customer_validate_html5/templates/customer.html
    :language: html+jinja



Клијентска валидација уз помоћ JavaScript-а
*******************************************

Традиционалан начин да се валидација изврши на клијенту је да се
употреби програмски језик JavaScript. Прикажимо један такав клијентски
скрипт.  Видели смо да је за основне врсте валидације много
једноставније користити подршку коју за то доноси HTML 5, међутим,
програмирањем валидације потпуно ручно у језику JavaScript учимо
технике које могу бити корисне у задацима у којима су услови
коректности толико сложени да их није могуће задати само помоћу језика
HTML 5.

Скрипт за валидацију уписујемо на крај шаблона
``templates/customer.html`` (то је шаблон у ком се налази формулар за
додавање новог корисника, којег смо описали у претходној лекцији),
унутар елемента ``script` (подсетимо се, то је основни начин да се
JavaScript скрипт упише у HTML датотеку). Алтернативно, могли бисмо да
JavaScript упишемо у засебну ``*.js`` датотеку, а из овог шаблона само
да је укључимо. Та JavaScript датотека би требало да буде смештена у
директоријум ``static`` или неки од његових поддиректоријума.

.. literalinclude:: /../_src/02_baze/06_insert_customer_validate/templates/customer.html
    :language: html+jinja
    :lines: 44-81

На почетку JavaScript скрипта региструјемо реакцију на догађај
``submit`` за формулар. Формулару постављамо идентификатор
``customerForm``, па му на основу тога из JavaScript кода можемо
приступити помоћу израза ``document.forms.customerForm``. Подсетимо
се, реакцију на догађај можемо поставити функцијом
``document.addEventListener``, којој прослеђујемо ниску са називом
догађаја (у нашем случају то је догађај ``"submit"``) и назив функције
која се позива када се догађај догоди (у нашем случају, када се
притисне дугме ``submit`` у нашем формулару). Главни посао у
валидацији се одвија унутар функције ``validateForm`` коју дефинишемо.
На почетку функције дефинишемо помоћне променљиве које прихватају DOM
објекте који представљају формулар и његова појединачна поља. Након
тога дефинишемо две помоћне функције које ће проверавати одређена
својства поља за унос текста.

Прва је функција ``validateNonEmpty`` чији је задатак да провери да ли
је у прослеђено поље за унос текста нешто уписано. Проверу да ли је
поље празно можемо урадити тако што израчунамо дужину уписаног текста
у њега (њему приступамо преко атрибута ``value``) и проверимо да ли је
она једнака нули. Ако јесте, то поље се обележава CSS класом
``invalid``, а ако није та класа се уклања. У CSS-у се лако може
подесити да се поља која имају ту класу прикажу са црвеном
позадином. Функција ``validateNonEmpty`` враћа ``true`` ако поље није
празно тј. ``false`` ако јесте.

Друга је функција специфична за проверу мејл адресе. У њојој се
коришћењем регуларног израза проверава да ли је мејл адреса унета у
коректном формату. Регуларни израз који је наведен је облика
``^[a-z0-9+_\.-]+@[a-z0-9\.-]+$``. Карактери ``^`` на почетку регуларног
израза и ``$`` на крају означавају почетак и крај ниске, што значи да
у пољу у које је унета мејл адреса не може да постоји (неће бити 
прихваћено као валидно) ништа осим онога
што је описано средишњим делом регуларног израза. Ту се наводи да
испред карактера ``@`` може да се јави један или више карактера из
скупа карактера који садржи мала слова, цифре, подвлаку, тачку или
цртицу. Скуп карактера (тзв. карактерска класа) се у регуларним
изразима описује помоћу угластих заграда ``[...]``, а појава нечега
један или више пута се описује специјалним симболом ``+``. Иза
карактера ``@`` може да се јави један или или више карактера из скупа
карактера који садржи мала слова, цифре, тачку или цртицу. Да би се
занемарила разлика између малих и великих слова, унета мејл адреса се
пре провере исправности трансформише тако што јој се сва велика слова
конвертују у мала (методом ``toLowerCase()``). Исправне мејл адресе на
основу овог регуларног израза су ``pera@gmail.com``,
``laza123.gojkovic@petlja.org``, али и ``djoka@hotmail`` (јер се у
регуларном изразу не захтева да се након карактера ``@`` налази бар
једна тачкица). Регуларни израз којим се описује исправна мејл адреса
може бити много прецизнији (и самим тим и компликованији). У наставку
је приказан пример једног таквог израза.

.. code-block:: javascript
                
   const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

На крају функције ``validateForm`` се коришћењем ових помоћних
функција за свако поље за унос текста проверава да ли је непразно и
проверава се коректност формата унете мејл адресе. Ако је нешто
погрешно, позивом ``event.preventDefault()`` се спречава слање новог
захтева на сервер (практично се поништава подразумевано дејство клика
на дугме ``submit``). Ако није било грешака, подаци се шаљу на сервер
(то се дешава подразумевано и не треба наводити никакве посебне
наредбе да би се до десило).

Серверска валидација
********************

Чак и када се изврши валидација формулара на страни клијента, сервер
не сме да се поузда у то да су подаци које је примио коректни (јер је
валидацију на страни клијента веома једноставно искључити или
заобићи). Стога је увек неопходно извршити и валидацију података на
страни сервера. У наставку ћемо приказати како се валидација може
испрограмирати потпуно ручно, у Python скрипту који користи библиотеку
Flask.

Серверски скрипт ``app.py`` који је проширен тако да укључује и
валидацију података из формулара је приказан у наставку.

.. literalinclude:: /../_src/02_baze/06b_insert_customer_validate_html5/app.py
    :language: python
    :lines: 20-
               
Скрипт би могао бити даље унапређен тако што би се информација о томе
у ком је пољу дошло до грешке проследила шаблону, да би онда шаблон на
основу те информације визуелно другачије приказао поља која садрже
неисправне податке.

Након прикупљања података из POST захтева (коришћењем
``request.form``), врши се провера њихове коректности. За сваки
податак се проверава да ли постоји (ако не постоји, вредност променљиве
ће бити ``None``) као и да ли је непразан (то радимо тако што прво
методом ``strip()`` уклонимо све белине са почетка и са краја).
   
Питања и задаци
***************

.. questionnote::

   Допунити JavaScript скрипт за проверу формулара провером формата
   унетог броја телефона (употребити поново регуларне изразе).
